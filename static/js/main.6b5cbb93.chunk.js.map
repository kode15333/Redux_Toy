{"version":3,"sources":["store/modules/counter.js","store/modules/waiting.js","store/modules/index.js","components/Palette.js","containers/PaletteContainer.js","components/Counter.js","containers/CounterContainer.js","components/WaitingList.js","containers/WaitingListContainer.js","App.js","serviceWorker.js","index.js"],"names":["initialState","color","number","CREATE","ENTER","LEAVE","id","initalState","input","list","name","entered","combineReducers","counter","state","action","type","waiting","text","concat","payload","map","item","filter","colors","PaletteItem","active","onClick","className","style","backgroundColor","Palette","selected","onSelect","key","PaletteContainer","handleSelect","changeColor","props","console","log","this","Component","connect","dispatch","Counter","value","onIncrement","onDecrement","CounterContainer","handleIncrement","increment","handleDecrement","decrement","WaitingItem","onEnter","onLeave","WaitingList","waitingList","onChange","onSubmit","WaitingListContainer1","handleChange","e","changeInput","target","handleSumbit","preventDefault","create","enter","leave","App","WaitingListContainer","Boolean","window","location","hostname","match","devTools","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","rootReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6b5cbb93.chunk.js","sourcesContent":["// 액션(액션타입지정)\r\n// Ducks 패턴은 액션명은\r\n// npm - module - or - app / reducer / ACTION_TYPE 형태의 action 타입을 가져야합니다\r\nconst CHANGE_COLOR = \"counter/CHANGE_COLOR\";\r\nconst INCREMENT = \"counter/INCREMENT\";\r\nconst DECREMENT = \"counter/DECREMENT\";\r\n\r\n// 액션생성자\r\nexport const changeColor = color => ({ type: CHANGE_COLOR, color });\r\nexport const increment = () => ({ type: INCREMENT });\r\nexport const decrement = () => ({ type: DECREMENT });\r\n\r\n// 초기값\r\nconst initialState = {\r\n  color: \"red\",\r\n  number: 0\r\n};\r\n\r\n// 리듀서\r\n// dispatch를 통해서 state 와 action을 가져와 counter함수를 실행\r\nexport default function counter(state = initialState, action) {\r\n  switch (action.type) {\r\n    case CHANGE_COLOR:\r\n      return {\r\n        ...state,\r\n        color: action.color\r\n      };\r\n    case INCREMENT:\r\n      return {\r\n        ...state,\r\n        number: state.number + 1\r\n      };\r\n    case DECREMENT:\r\n      return {\r\n        ...state,\r\n        number: state.number - 1\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","const CHANGE_INPUT = \"waiting/CHANGE_INPUT\";\r\nconst CREATE = \"waiting/CREATE\";\r\nconst ENTER = \"waiting/ENTER\";\r\nconst LEAVE = \"waiting/LEAVE\";\r\n\r\nlet id = 1;\r\n\r\nexport const changeInput = text => ({ type: CHANGE_INPUT, text });\r\nexport const create = name => ({\r\n    type: CREATE,\r\n    payload: { name, id: id++ }\r\n});\r\nexport const enter = id => ({ type: ENTER, id });\r\nexport const leave = id => ({ type: LEAVE, id });\r\n\r\nconst initalState = {\r\n    input: \"\",\r\n    list: [\r\n        {\r\n            id: 0,\r\n            name: \"사용자1\",\r\n            entered: false\r\n        }\r\n    ]\r\n};\r\n\r\nexport default function waiting(state = initalState, action) {\r\n    switch (action.type) {\r\n        case CHANGE_INPUT:\r\n            return {\r\n                ...state,\r\n                input: action.text\r\n            };\r\n        case CREATE:\r\n            return {\r\n                ...state,\r\n                list: state.list.concat({ ...action.payload, entered: false })\r\n            };\r\n        case ENTER:\r\n            return {\r\n                ...state,\r\n                list: state.list.map(item => {\r\n                    if (item.id === action.id) {\r\n                        return {\r\n                            ...item,\r\n                            entered: !item.entered\r\n                        };\r\n                    }\r\n                    return item;\r\n                })\r\n            };\r\n        case LEAVE:\r\n            return {\r\n                ...state,\r\n                list: state.list.filter(item => item.id !== action.id)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport counter from \"./counter\";\r\nimport waiting from \"./waiting\";\r\n\r\n// conbine리듀서로 여러가지로 나누어져있는 리듀서를 하나로 합쳐준다.\r\nexport default combineReducers({\r\n    counter,\r\n    waiting\r\n});\r\n","import React from \"react\";\r\nimport \"./Palette.css\";\r\n\r\nconst colors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\"];\r\n\r\nconst PaletteItem = ({ color, active, onClick }) => {\r\n  return (\r\n    <div\r\n      className={`PaletteItem ${active ? \"active\" : \"\"}`}\r\n      style={{ backgroundColor: color }}\r\n      onClick={onClick}\r\n    />\r\n  );\r\n};\r\n\r\nconst Palette = ({ selected, onSelect }) => {\r\n  return (\r\n    <div className=\"Palette\">\r\n      <h2>색깔을 골라골라</h2>\r\n      <div className=\"colors\">\r\n        {colors.map(color => (\r\n          <PaletteItem\r\n            color={color}\r\n            key={color}\r\n            active={selected === color}\r\n            onClick={() => onSelect(color)} // **** onClick 구현\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Palette;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Palette from \"../components/Palette\";\r\nimport { changeColor } from \"../store/modules/counter\";\r\n// 1. 액션을 가지고 와서\r\n\r\nclass PaletteContainer extends Component {\r\n  handleSelect = color => {\r\n    const { changeColor } = this.props;\r\n    console.log(\"what\");\r\n    // Hello\r\n    changeColor(color);\r\n  };\r\n\r\n  render() {\r\n    const { color } = this.props;\r\n    return <Palette onSelect={this.handleSelect} selected={color} />;\r\n  }\r\n}\r\n//  state {counter{ color: \"red\",number: 0}}\r\n// mapStateToProps로 Store에서 가져온 state값을 props로  대입\r\n// props 로 넣어줄 스토어 상태값\r\nconst mapStateToProps = state => ({\r\n  color: state.counter.color\r\n});\r\n\r\n// props 로 넣어줄 액션 생성함수\r\n//mapDispatchToProps의 첫번째 인자는 dispatch인것이 룰이다\r\n//mapDispatchToprops로 class내에서 changeColor사용가능\r\nconst mapDispatchToProps = dispatch => ({\r\n  //   changeColor: color => dispatch({ type: \"CHANGE_COLOR\", color })\r\n  //   위와 같이 작동한다 dispatch는 스토어에게 액션을 전달하여  state값을 변화하게 만든다.\r\n  //   store에 있는 changeColor에 color를 대입하여 type과 color를 가져오고 이걸 dispatch로 store로 보내 state를 변화한다.\r\n  // 현재 changeColor 키 값에 함수만 대입해 놓고 class에서 호출하면 사용할 수 있게 만든것이다.\r\n  changeColor: color => dispatch(changeColor(color))\r\n  // 2. props에 dispatch랑 연동\r\n});\r\n\r\n// 컴포넌트에 리덕스 스토어를 연동해줄 때에는 connect 함수 사용\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PaletteContainer);\r\n","import React from \"react\";\r\nimport \"./Counter.css\";\r\n\r\nconst Counter = ({ value, color, onIncrement, onDecrement }) => {\r\n  return (\r\n    <div className=\"Counter\">\r\n      <h1 style={{ color }}>{value}</h1>\r\n      <button onClick={onIncrement}>+</button>\r\n      <button onClick={onDecrement}>-</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Counter from \"../components/Counter\";\r\nimport { increment, decrement } from \"../store/modules/counter\";\r\n\r\nclass CounterContainer extends Component {\r\n  handleIncrement = () => {\r\n    const { increment } = this.props;\r\n    increment();\r\n  };\r\n  handleDecrement = () => {\r\n    const { decrement } = this.props;\r\n    decrement();\r\n  };\r\n\r\n  render() {\r\n    const { number, color } = this.props;\r\n    return (\r\n      <Counter\r\n        value={number}\r\n        color={color}\r\n        onIncrement={this.handleIncrement}\r\n        onDecrement={this.handleDecrement}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  number: state.counter.number,\r\n  color: state.counter.color\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  increment: () => dispatch(increment()),\r\n  decrement: () => dispatch(decrement())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CounterContainer);\r\n","import React from \"react\";\r\nimport \"./WaitingList.css\";\r\n\r\nconst WaitingItem = ({ text, entered, onEnter, onLeave }) => {\r\n  return (\r\n    <li>\r\n      <div className={`text ${entered ? \"entered\" : \"\"}`}>{text}</div>\r\n      <div className=\"buttons\">\r\n        <button onClick={onEnter}>입장</button>\r\n        <button onClick={onLeave}>나감</button>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nconst WaitingList = ({\r\n  input,\r\n  waitingList,\r\n  onChange,\r\n  onEnter,\r\n  onLeave,\r\n  onSubmit\r\n}) => {\r\n  return (\r\n    <div className=\"WaitingList\">\r\n      <h2>대기자</h2>\r\n      <form onSubmit={onSubmit}>\r\n        <input value={input} onChange={onChange} />\r\n        <button type=\"submit\">등록</button>\r\n      </form>\r\n      <ul>\r\n        {waitingList.map(item => (\r\n          <WaitingItem\r\n            key={item.id}\r\n            text={item.name}\r\n            entered={item.entered}\r\n            onEnter={() => onEnter(item.id)}\r\n            onLeave={() => onLeave(item.id)}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WaitingList;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { changeInput, create, enter, leave } from \"../store/modules/waiting\";\r\nimport WaitingList from \"../components/WaitingList\";\r\n\r\nclass WaitingListContainer1 extends Component {\r\n    handleChange = e => {\r\n        this.props.changeInput(e.target.value);\r\n    };\r\n\r\n    handleSumbit = e => {\r\n        e.preventDefault();\r\n        this.props.create(this.props.input);\r\n        this.props.changeInput(\"\");\r\n    };\r\n\r\n    render() {\r\n        const { input, list, enter, leave } = this.props;\r\n        return (\r\n            <WaitingList\r\n                input={input}\r\n                waitingList={list}\r\n                onChange={this.handleChange}\r\n                onSubmit={this.handleSumbit}\r\n                onEnter={enter}\r\n                onLeave={leave}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    ({ waiting: { input, list } }) => ({\r\n        input,\r\n        list\r\n    }),\r\n    { changeInput, create, enter, leave }\r\n)(WaitingListContainer1);\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./App.css\";\r\nimport PaletteContainer from \"./containers/PaletteContainer\";\r\nimport CounterContainer from \"./containers/CounterContainer\";\r\nimport WaitingListContainer from \"./containers/WaitingListContainer\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <PaletteContainer />\r\n        <CounterContainer />\r\n        <WaitingListContainer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { createStore } from \"redux\";\r\n// index를 안쓰면 index를 찾아간다.\r\nimport rootReducer from \"./store/modules\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nconst devTools =\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\r\nconst store = createStore(rootReducer, devTools);\r\n\r\n// const store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n  // Provider 컴포넌트로 App컴포넌트는 Store와 연동\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}